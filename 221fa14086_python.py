# -*- coding: utf-8 -*-
"""221FA14086 python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1acu9WzeUJBziLqTrRIdIgUHibydPLYEy
"""

# Load necessary libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import statsmodels.api as sm
from sklearn.linear_model import LinearRegression

# Load the dataset
data = pd.read_csv("/content/store.csv")

# 1. EDA: Summary of dataset
print(data.describe())

# 2. EDA: Missing value analysis
print(data.isnull().sum())

# 3. EDA: Distribution of 'CompetitionDistance'
plt.figure(figsize=(10,6))
sns.histplot(data['CompetitionDistance'], bins=50, color='blue', kde=False)
plt.title('Distribution of Competition Distance')
plt.xlabel('Competition Distance')
plt.ylabel('Frequency')
plt.show()

# 4. EDA: Count of stores by StoreType
plt.figure(figsize=(8,6))
sns.countplot(x='StoreType', data=data, palette='Set2')
plt.title('Count of Stores by Store Type')
plt.xlabel('Store Type')
plt.ylabel('Count')
plt.show()

# 5. EDA: Correlation between CompetitionDistance and Promo2SinceYear
correlation = data[['CompetitionDistance', 'Promo2SinceYear']].corr(method='pearson')
print(f"Correlation between CompetitionDistance and Promo2SinceYear:\n{correlation}")

# Linear Regression: Predicting 'CompetitionDistance' based on 'Promo2' and 'Promo2SinceYear'
data = data.dropna(subset=['CompetitionDistance', 'Promo2', 'Promo2SinceYear'])  # Drop rows with missing values

X = data[['Promo2', 'Promo2SinceYear']]
y = data['CompetitionDistance']

# Add constant to predictor variables (for statsmodels)
X = sm.add_constant(X)

# Fit the regression model
model = sm.OLS(y, X).fit()
print(model.summary())

# Regression Graph: Scatter plot with regression line for 'Promo2SinceYear' vs 'CompetitionDistance'
plt.figure(figsize=(10,6))
sns.scatterplot(x='Promo2SinceYear', y='CompetitionDistance', data=data)
sns.regplot(x='Promo2SinceYear', y='CompetitionDistance', data=data, scatter=False, color='red')
plt.title('Regression: Promo2SinceYear vs CompetitionDistance')
plt.xlabel('Promo2 Since Year')
plt.ylabel('Competition Distance')
plt.show()

# Regression Graph: Boxplot for 'Promo2' vs 'CompetitionDistance'
plt.figure(figsize=(10,6))
sns.boxplot(x='Promo2', y='CompetitionDistance', data=data)
plt.title('Boxplot: Promo2 vs CompetitionDistance')
plt.xlabel('Promo2')
plt.ylabel('Competition Distance')
plt.show()

# Load necessary libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import statsmodels.api as sm

# Load the dataset
data = pd.read_csv("/content/store.csv")

# Handle missing values by removing rows with missing values for the regression
data_clean = data[['CompetitionDistance', 'Promo2', 'Promo2SinceYear']].dropna()

# Linear Regression: Predicting 'CompetitionDistance' based on 'Promo2' and 'Promo2SinceYear'
X = data_clean[['Promo2', 'Promo2SinceYear']]
y = data_clean['CompetitionDistance']

# Add a constant for the intercept
X = sm.add_constant(X)

# Fit the linear regression model
model = sm.OLS(y, X).fit()

# Print the summary of the model
print(model.summary())

# Visualization 1: Scatter plot with regression line for 'Promo2SinceYear' vs 'CompetitionDistance'
plt.figure(figsize=(10,6))
sns.scatterplot(x='Promo2SinceYear', y='CompetitionDistance', data=data_clean)
sns.regplot(x='Promo2SinceYear', y='CompetitionDistance', data=data_clean, scatter=False, color='blue')
plt.title("Linear Regression: Promo2SinceYear vs CompetitionDistance")
plt.xlabel("Promo2 Since Year")
plt.ylabel("Competition Distance")
plt.show()

# Visualization 2: Boxplot for 'Promo2' vs 'CompetitionDistance'
plt.figure(figsize=(8,6))
sns.boxplot(x='Promo2', y='CompetitionDistance', data=data_clean)
plt.title("Boxplot: Promo2 vs CompetitionDistance")
plt.xlabel("Promo2")
plt.ylabel("Competition Distance")
plt.show()

# Load necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load the dataset
data = pd.read_csv("/content/store.csv")

# Handle missing values by removing rows with missing values in the relevant columns
data_clean = data[['CompetitionDistance', 'Promo2', 'Promo2SinceYear']].dropna()

# Linear Regression: Predicting 'CompetitionDistance' based on 'Promo2' and 'Promo2SinceYear'
X = data_clean[['Promo2', 'Promo2SinceYear']]
y = data_clean['CompetitionDistance']

# Fit the linear regression model
model = LinearRegression()
model.fit(X, y)

# R-squared value
r_squared = model.score(X, y)
print(f"R-squared: {r_squared}")

# Predicting 'CompetitionDistance' for RMSE calculation
predicted_values = model.predict(X)

# Calculating RMSE
rmse_value = np.sqrt(mean_squared_error(y, predicted_values))
print(f"RMSE: {rmse_value}")

# Visualization: Actual vs Predicted values
plt.figure(figsize=(10,6))
sns.scatterplot(x=y, y=predicted_values)
plt.plot([y.min(), y.max()], [y.min(), y.max()], color='red', lw=2)
plt.title("Actual vs Predicted Competition Distance")
plt.xlabel("Actual Competition Distance")
plt.ylabel("Predicted Competition Distance")
plt.show()